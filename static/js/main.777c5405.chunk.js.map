{"version":3,"sources":["images/ganesh.jpeg","images/sandeep.jpeg","components/profile/profile.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Profile","useState","setUserName","profilePic","setProfilePic","useEffect","name","URLSearchParams","window","location","search","get","sandeepPic","ganeshPic","className","src","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qHAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,4KC6E5BC,MAxEf,WAGI,MAAgCC,mBAAS,IAAzC,mBAAiBC,GAAjB,WACA,EAAoCD,mBAAS,IAA7C,mBAAOE,EAAP,KAAmBC,EAAnB,KAqBA,OAfAC,qBAAU,WACN,IACMC,EADY,IAAIC,gBAAgBC,OAAOC,SAASC,QAC/BC,IAAI,QAEvBL,GACAJ,EAAYI,GACSF,EAAZ,YAATE,EAAmCM,IAA4BC,MAE/DX,EAAY,YAGjB,IAKC,yBAAKY,UAAU,kBAIX,yBAAKA,UAAU,oBAEX,yBAAKA,UAAU,eAAeC,IAAKZ,IAEnC,yBAAKW,UAAU,qBACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,SAAf,QACA,yBAAKA,UAAU,SAAf,0BAEJ,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,SAAf,iBACA,yBAAKA,UAAU,SAAf,iBAEJ,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,SAAf,WACA,yBAAKA,UAAU,SAAf,SAEJ,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,SAAf,wBACA,yBAAKA,UAAU,SAAf,gBAEJ,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,SAAf,yBACA,yBAAKA,UAAU,SAAf,gBAEJ,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,SAAf,qBACA,yBAAKA,UAAU,SAAf,gBAEJ,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,SAAf,eACA,yBAAKA,UAAU,SAAf,cAIZ,yBAAKA,UAAU,UACX,uBAAGA,UAAU,aAAb,wCC3DDE,MATf,WAEE,OACE,yBAAKF,UAAU,OACb,kBAAC,EAAD,QCKcG,QACW,cAA7BT,OAAOC,SAASS,UAEe,UAA7BV,OAAOC,SAASS,UAEhBV,OAAOC,SAASS,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.777c5405.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ganesh.70b4c10c.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/sandeep.9aea582a.jpeg\";","import React, { useState, useEffect } from 'react';\nimport ganeshPic from '../../images/ganesh.jpeg';\nimport sandeepPic from '../../images/sandeep.jpeg';\nimport './profile.scss';\n\nfunction Profile() {\n\n\n    const [userName, setUserName] = useState('');\n    const [profilePic, setProfilePic] = useState('');\n\n    const sandeep = {\n        name: \"Sandeep\"\n    }\n\n    useEffect(() => {\n        const urlParams = new URLSearchParams(window.location.search);\n        const name = urlParams.get('name');\n\n        if (name) {\n            setUserName(name);\n            name === 'sandeep' ? setProfilePic(sandeepPic) : setProfilePic(ganeshPic);\n        } else {\n            setUserName('Ganesh');\n        }\n\n    }, [])\n\n\n\n    return (\n        <div className=\"main-container\">\n            {/* <div className=\"header\">\n                <h1> XYZ Water supply</h1>\n            </div> */}\n            <div className=\"middle-container\">\n                {/* <div className=\"image-container\"> */}\n                <img className=\"image-resize\" src={profilePic}></img>\n                {/* </div> */}\n                <div className=\"details-container\">\n                    <div className=\"field-container\">\n                        <div className=\"field\">Name</div>\n                        <div className=\"value\">Ganesh Adinath Pathak</div>\n                    </div>\n                    <div className=\"field-container\">\n                        <div className=\"field\">Date Of Birth</div>\n                        <div className=\"value\">13-Sept-1989</div>\n                    </div>\n                    <div className=\"field-container\">\n                        <div className=\"field\">Address</div>\n                        <div className=\"value\">Pune</div>\n                    </div>\n                    <div className=\"field-container\">\n                        <div className=\"field\">Card Activation Date</div>\n                        <div className=\"value\">10-Jan-2021</div>\n                    </div>\n                    <div className=\"field-container\">\n                        <div className=\"field\">Last Transaction Date</div>\n                        <div className=\"value\">10-Jan-2021</div>\n                    </div>\n                    <div className=\"field-container\">\n                        <div className=\"field\">Last Payment Date</div>\n                        <div className=\"value\">10-Jan-2021</div>\n                    </div>\n                    <div className=\"field-container\">\n                        <div className=\"field\">Payment Due</div>\n                        <div className=\"value\">1000 Rs</div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"footer\">\n                <p className=\"copyright\">Â© Amay Software Solutions 2020</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Profile\n","import React from 'react';\nimport Profile from './components/profile/profile'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Profile></Profile>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}